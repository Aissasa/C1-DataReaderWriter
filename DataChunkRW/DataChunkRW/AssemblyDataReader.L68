00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/25/2016 11:28:03 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Assembly data reader
00000000                             3  * Written by : Aissa Ben Zayed
00000000                             4  * Date       : 10/25/2016
00000000                             5  * Description: This program read chunks of data generated
00000000                             6  *              by a C program, and replicates the stats 
00000000                             7  *              generated by the C program for a certain
00000000                             8  *              chunk chosen by the user
00000000                             9  *-----------------------------------------------------------
00000000                            10      
00001000                            11  START  ORG    $1000
00001000                            12  
00001000                            13      include "equates.x68"
00001000                            14  ;equates
00001000                            15  
00001000                            16  ;commands
00001000  =00000004                 17  READ_A_NUMBER                   EQU 4
00001000  =0000000D                 18  DISPLAY_STRING_WITH_RETURN      EQU 13
00001000  =0000000E                 19  DISPLAY_STRING_WITHOUT_RETURN   EQU 14
00001000                            20  
00001000                            21  
00001000                            22  ;input
00001000  =00000000                 23  MIN_CHUNK_NUMBER    EQU 0
00001000  =00000032                 24  MAX_CHUNK_NUMBER    EQU 50
00001000                            25  
00001000                            26  
00001000  =0000000D                 27  CR  EQU $0D
00001000  =0000000A                 28  LF  EQU $0A
00001000  =0000000A                 29  -------------------- end include --------------------
00001000                            30  
00001000                            31  Main:
00001000                            32  
00001000  4EB9 0000100A             33      jsr GetInput
00001006                            34  
00001006  4E72 3000                 35      STOP #$3000
0000100A                            36  
0000100A                            37  GetInput:
0000100A                            38      ;display entry message
0000100A  43F9 00001030             39      lea     message, a1
00001010                            40  .DisplayMessage:
00001010  700D                      41      move.l  #(DISPLAY_STRING_WITH_RETURN), d0
00001012  4E4F                      42      trap    #15
00001014                            43  
00001014                            44      ;read the chunk number from the user
00001014  7004                      45      move.l  #(READ_A_NUMBER), d0
00001016  4E4F                      46      trap    #15
00001018                            47  
00001018                            48      ;input control
00001018  B2BC 00000000             49      cmp.l   #(MIN_CHUNK_NUMBER), d1
0000101E  6FF0                      50      ble     .DisplayMessage
00001020                            51  
00001020  B2BC 00000032             52      cmp.l   #(MAX_CHUNK_NUMBER), d1
00001026  6CE8                      53      bge     .DisplayMessage
00001028                            54  
00001028                            55      ;store the chunk number
00001028  23C1 0000106E             56      move.l  d1, (chunkNumber)
0000102E                            57  
0000102E  4E75                      58      rts
00001030                            59  
00001030                            60  
00001030                            61  
00001030                            62  
00001030                            63  
00001030                            64  
00001030                            65  
00001030                            66  ;variables
00001030                            67  
00001030= 49 6E 70 75 74 20 ...     68  message     dc.b 'Input the number of the data chunk(Must be between 1 and 49):',0  ;with return to the line
0000106E= 00000000                  69  chunkNumber dc.l 0  
00001072                            70  
00001072                            71      END    START       

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHUNKNUMBER         106E
CR                  D
DISPLAY_STRING_WITHOUT_RETURN  E
DISPLAY_STRING_WITH_RETURN  D
GETINPUT            100A
GETINPUT:DISPLAYMESSAGE  1010
LF                  A
MAIN                1000
MAX_CHUNK_NUMBER    32
MESSAGE             1030
MIN_CHUNK_NUMBER    0
READ_A_NUMBER       4
START               1000
