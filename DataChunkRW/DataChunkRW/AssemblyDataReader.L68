00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/26/2016 11:23:14 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Assembly data reader
00000000                             3  * Written by : Aissa Ben Zayed
00000000                             4  * Date       : 10/25/2016
00000000                             5  * Description: This program read chunks of data generated
00000000                             6  *              by a C program, and replicates the stats 
00000000                             7  *              generated by the C program for a certain
00000000                             8  *              chunk chosen by the user
00000000                             9  *-----------------------------------------------------------
00000000                            10      
00001000                            11  START  ORG    $1000
00001000                            12  
00001000                            13      include "equates.x68"
00001000                            14  ;equates
00001000                            15  
00001000                            16  ALL_REG                         REG d0-d7/a0-a6
00001000                            17  
00001000                            18  ;commands
00001000  =00000003                 19  DISPLAY_NUMBER                  EQU 3
00001000  =00000004                 20  READ_A_NUMBER                   EQU 4
00001000  =0000000D                 21  DISPLAY_STRING_WITH_RETURN      EQU 13
00001000  =0000000E                 22  DISPLAY_STRING_WITHOUT_RETURN   EQU 14
00001000                            23  
00001000                            24  
00001000                            25  ;input
00001000  =00000001                 26  MIN_CHUNK_NUMBER                EQU 1
00001000                            27  
00001000                            28  
00001000  =0000000D                 29  CR  EQU $0D
00001000  =0000000A                 30  LF  EQU $0A
00001000  =0000000A                 31  -------------------- end include --------------------
00001000                            32  
00001000                            33  Main:
00001000                            34  
00001000  4EB9 00001020             35      jsr InitializeVars
00001006  4EB9 00001036             36      jsr GetInput
0000100C  4EB9 00001070             37      jsr CalculateAverages
00001012  4EB9 000011C4             38      jsr DisplayAverages
00001018                            39      
00001018  4EF8 1000                 40      jmp  Main           ;for loopable testing
0000101C  4E72 3000                 41      STOP #$3000
00001020                            42  
00001020                            43  
00001020                            44  InitializeVars:
00001020                            45  
00001020  41F9 00001304             46      lea     data, a0
00001026  2E18                      47      move.l  (a0)+, d7
00001028  4EB9 0000123E             48      jsr     SwapBytes
0000102E  23C7 000012D8             49      move.l  d7, (numberOfChunks)
00001034                            50  
00001034  4E75                      51      rts
00001036                            52  
00001036                            53  GetInput:
00001036                            54  .DisplayMessage:
00001036                            55      ;display entry message
00001036  43F9 00001246             56      lea     messageFirstPart, a1   
0000103C  700E                      57      move.l  #(DISPLAY_STRING_WITHOUT_RETURN), d0
0000103E  4E4F                      58      trap    #15
00001040                            59  
00001040  2239 000012D8             60      move.l  (numberOfChunks), d1
00001046  7003                      61      move.l  #(DISPLAY_NUMBER), d0
00001048  4E4F                      62      trap    #15
0000104A                            63  
0000104A  43F9 00001284             64      lea     messageSecondPart, a1   
00001050  700D                      65      move.l  #(DISPLAY_STRING_WITH_RETURN), d0
00001052  4E4F                      66      trap    #15
00001054                            67  
00001054                            68      ;read the chunk number from the user
00001054  7004                      69      move.l  #(READ_A_NUMBER), d0
00001056  4E4F                      70      trap    #15
00001058                            71  
00001058                            72      ;input control
00001058  B2BC 00000001             73      cmp.l   #(MIN_CHUNK_NUMBER), d1
0000105E  6DD6                      74      blt     .DisplayMessage
00001060                            75  
00001060                            76  
00001060  B2B9 000012D8             77      cmp.l   (numberOfChunks), d1
00001066  6ECE                      78      bgt     .DisplayMessage
00001068                            79  
00001068                            80      ;store the chunk number
00001068  23C1 000012D4             81      move.l  d1, (chunkNumber)
0000106E                            82  
0000106E  4E75                      83      rts
00001070                            84  
00001070                            85  
00001070                            86  CalculateAverages:
00001070                            87      
00001070  2C48                      88      move.l  a0, a6
00001072                            89      ;set current chunk
00001072  4286                      90      clr.l   d6
00001074                            91  .RetrieveStgs:
00001074  5286                      92      add.l   #1, d6
00001076                            93  
00001076  2E1E                      94      move.l  (a6)+, d7
00001078  4EB9 0000123E             95      jsr     SwapBytes
0000107E  23C7 000012DC             96      move.l  d7, (currentNumberOfBytes)
00001084                            97  
00001084  2E1E                      98      move.l  (a6)+, d7
00001086  4EB9 0000123E             99      jsr     SwapBytes
0000108C  23C7 000012E0            100      move.l  d7, (currentNumberOfShorts)
00001092                           101      
00001092  2E1E                     102      move.l  (a6)+, d7
00001094  4EB9 0000123E            103      jsr     SwapBytes
0000109A  23C7 000012E4            104      move.l  d7, (currentNumberOfLongs)
000010A0                           105      
000010A0  2E1E                     106      move.l  (a6)+, d7
000010A2  4EB9 0000123E            107      jsr     SwapBytes
000010A8  23C7 000012E8            108      move.l  d7, (currentBytesPadding)
000010AE                           109      
000010AE  BCB9 000012D4            110      cmp.l   (chunkNumber), d6
000010B4  6700 0026                111      beq     .MakeCalcs
000010B8                           112  
000010B8                           113  .ToNextChunk:
000010B8                           114  
000010B8                           115      ;add offsets 
000010B8                           116      ;bytes offset
000010B8  DDF9 000012DC            117      add.l   (currentNumberOfBytes), a6
000010BE  DDF9 000012E8            118      add.l   (currentBytesPadding), a6
000010C4                           119      ;shorts offset
000010C4  2039 000012E0            120      move.l  (currentNumberOfShorts), d0
000010CA  E380                     121      asl.l   #1, d0
000010CC  DDC0                     122      add.l   d0, a6
000010CE                           123      ;longs offset
000010CE  2039 000012E4            124      move.l  (currentNumberOfLongs), d0
000010D4  E580                     125      asl.l   #2, d0
000010D6  DDC0                     126      add.l   d0, a6
000010D8                           127  
000010D8  4EF8 1074                128      jmp     .RetrieveStgs
000010DC                           129  
000010DC                           130  
000010DC                           131  .MakeCalcs:
000010DC                           132  .CalcBytesAvg:
000010DC                           133  
000010DC  2039 000012DC            134      move.l  (currentNumberOfBytes), d0  ;counter
000010E2  4281                     135      clr.l   d1                          ;gonna contain the total
000010E4                           136  
000010E4                           137  .AddNextByte:
000010E4                           138      
000010E4  4287                     139      clr.l   d7
000010E6                           140  
000010E6  1E1E                     141      move.b  (a6)+, d7
000010E8  D287                     142      add.l   d7, d1                      ;add the byte to the total
000010EA                           143  
000010EA  5380                     144      sub.l   #1, d0
000010EC  66F6                     145      bne     .AddNextByte
000010EE                           146  
000010EE                           147  .SetBytesAvg:
000010EE                           148      
000010EE  2039 000012DC            149      move.l  (currentNumberOfBytes), d0  
000010F4  82C0                     150      divu    d0,d1
000010F6                           151  
000010F6                           152      ;get the quotient 
000010F6  4282                     153      clr.l   d2
000010F8  3401                     154      move.w  d1, d2
000010FA  23C2 000012EC            155      move.l  d2, (bytesAverageQ)
00001100                           156  
00001100  4841                     157      swap.w  d1
00001102                           158  
00001102                           159      ;get the remainder
00001102  3401                     160      move.w  d1, d2
00001104  C4FC 0064                161      mulu    #100, d2    
00001108  84C0                     162      divu    d0, d2
0000110A  4281                     163      clr.l   d1
0000110C  3202                     164      move.w  d2, d1
0000110E                           165      ;round
0000110E  4842                     166      swap    d2
00001110  4283                     167      clr.l   d3
00001112  3602                     168      move.w  d2, d3
00001114  E383                     169      asl.l   #1, d3
00001116  B680                     170      cmp.l   d0, d3
00001118  6D00 0004                171      blt     .NoByteRounding
0000111C                           172  
0000111C  5281                     173      addi.l  #1, d1
0000111E                           174  
0000111E                           175  .NoByteRounding:
0000111E  23C1 000012F0            176      move.l  d1, (bytesAverageR)
00001124                           177  
00001124                           178      ;add the bytes padding to the @
00001124  DDF9 000012E8            179      add.l   (currentBytesPadding), a6
0000112A                           180  
0000112A                           181  .CalcShortsAvg:
0000112A                           182  
0000112A  2039 000012E0            183      move.l  (currentNumberOfShorts), d0     ;counter
00001130  4281                     184      clr.l   d1                              ;gonna contain the total
00001132                           185  
00001132                           186  .AddNextShort:
00001132                           187      
00001132  4287                     188      clr.l   d7
00001134                           189  
00001134  3E1E                     190      move.w  (a6)+, d7
00001136  E15F                     191      rol.w   #8,d7
00001138  D287                     192      add.l   d7, d1                          ;add the short to the total
0000113A                           193  
0000113A  5380                     194      sub.l   #1, d0
0000113C  66F4                     195      bne     .AddNextShort
0000113E                           196  
0000113E                           197  .SetShortsAvg:
0000113E                           198      
0000113E  2039 000012E0            199      move.l  (currentNumberOfShorts), d0     
00001144  82C0                     200      divu    d0,d1
00001146                           201  
00001146                           202      ;get the quotient 
00001146  4282                     203      clr.l   d2
00001148  3401                     204      move.w  d1, d2
0000114A  23C2 000012F4            205      move.l  d2, (shortsAverageQ)
00001150                           206  
00001150  4841                     207      swap.w  d1
00001152                           208  
00001152                           209      ;get the remainder
00001152  3401                     210      move.w  d1, d2
00001154  C4FC 0064                211      mulu    #100, d2    
00001158  84C0                     212      divu    d0, d2
0000115A  4281                     213      clr.l   d1
0000115C  3202                     214      move.w  d2, d1
0000115E                           215      ;round
0000115E  4842                     216      swap    d2
00001160  4283                     217      clr.l   d3
00001162  3602                     218      move.w  d2, d3
00001164  E383                     219      asl.l   #1, d3
00001166  B680                     220      cmp.l   d0, d3
00001168  6D00 0004                221      blt     .NoShortRound
0000116C                           222  
0000116C  5281                     223      addi.l  #1, d1
0000116E                           224  
0000116E                           225  .NoShortRound:
0000116E  23C1 000012F8            226      move.l  d1, (shortsAverageR)
00001174                           227  
00001174                           228  
00001174                           229  .CalcLongsAvg:
00001174                           230  
00001174  2039 000012E4            231      move.l  (currentNumberOfLongs), d0      ;counter
0000117A  4281                     232      clr.l   d1                              ;gonna contain the total
0000117C                           233  
0000117C                           234  .AddNextLong:
0000117C                           235      
0000117C  4287                     236      clr.l   d7
0000117E                           237  
0000117E  2E1E                     238      move.l  (a6)+, d7
00001180  4EB9 0000123E            239      jsr     SwapBytes
00001186  D287                     240      add.l   d7, d1                          ;add the long to the total
00001188                           241  
00001188  5380                     242      sub.l   #1, d0
0000118A  66F0                     243      bne     .AddNextLong
0000118C                           244  
0000118C                           245  .SetLongsAvg:
0000118C                           246      
0000118C  2039 000012E4            247      move.l  (currentNumberOfLongs), d0  
00001192  82C0                     248      divu    d0,d1
00001194                           249  
00001194                           250      ;get the quotient 
00001194  4282                     251      clr.l   d2
00001196  3401                     252      move.w  d1, d2
00001198  23C2 000012FC            253      move.l  d2, (longsAverageQ)
0000119E                           254  
0000119E  4841                     255      swap.w  d1
000011A0                           256  
000011A0                           257      ;get the remainder
000011A0  3401                     258      move.w  d1, d2
000011A2  C4FC 0064                259      mulu    #100, d2    
000011A6  84C0                     260      divu    d0, d2
000011A8  4281                     261      clr.l   d1
000011AA  3202                     262      move.w  d2, d1
000011AC                           263      ;round
000011AC  4842                     264      swap    d2
000011AE  4283                     265      clr.l   d3
000011B0  3602                     266      move.w  d2, d3
000011B2  E383                     267      asl.l   #1, d3
000011B4  B680                     268      cmp.l   d0, d3
000011B6  6D00 0004                269      blt     .NoLongRounding
000011BA                           270  
000011BA  5281                     271      addi.l  #1, d1
000011BC                           272  
000011BC                           273  .NoLongRounding:
000011BC  23C1 00001300            274      move.l  d1, (longsAverageR)
000011C2                           275  
000011C2                           276  
000011C2  4E75                     277      rts
000011C4                           278  
000011C4                           279  
000011C4                           280  DisplayAverages:
000011C4                           281      
000011C4  45F9 000012D2            282      lea     point, a2   
000011CA                           283      ;display byte avg message
000011CA  47F9 00001287            284      lea     bytesAvgMsg, a3
000011D0  2439 000012EC            285      move.l  (bytesAverageQ), d2
000011D6  2639 000012F0            286      move.l  (bytesAverageR), d3
000011DC                           287  
000011DC  4EB9 00001214            288      jsr     DisplayOneAverage
000011E2                           289  
000011E2                           290      ;display short avg message
000011E2  47F9 000012A0            291      lea     shortsAvgMsg, a3
000011E8  2439 000012F4            292      move.l  (shortsAverageQ), d2
000011EE  2639 000012F8            293      move.l  (shortsAverageR), d3
000011F4                           294  
000011F4  4EB9 00001214            295      jsr     DisplayOneAverage
000011FA                           296  
000011FA                           297      ;display long avg message
000011FA  47F9 000012BA            298      lea     longsAvgMsg, a3
00001200  2439 000012FC            299      move.l  (longsAverageQ), d2
00001206  2639 00001300            300      move.l  (longsAverageR), d3
0000120C                           301  
0000120C  4EB9 00001214            302      jsr     DisplayOneAverage
00001212                           303  
00001212  4E75                     304      rts
00001214                           305  
00001214                           306  ;parameters: a2:point, a3:AvgMsg, d2: quotient, d3:remainder
00001214                           307  DisplayOneAverage:
00001214                           308      
00001214  224B                     309      move.l  a3, a1   
00001216  700E                     310      move.l  #(DISPLAY_STRING_WITHOUT_RETURN), d0
00001218  4E4F                     311      trap    #15
0000121A                           312  
0000121A  2202                     313      move.l  d2, d1
0000121C  7003                     314      move.l  #(DISPLAY_NUMBER), d0
0000121E  4E4F                     315      trap    #15
00001220                           316  
00001220  224A                     317      move.l  a2, a1   
00001222  700E                     318      move.l  #(DISPLAY_STRING_WITHOUT_RETURN), d0
00001224  4E4F                     319      trap    #15
00001226                           320  
00001226  B6BC 00000009            321      cmp.l   #9, d3
0000122C  6E00 0008                322      bgt     .DontAddZero
00001230                           323  
00001230  4281                     324      clr.l   d1
00001232  7003                     325      move.l  #(DISPLAY_NUMBER), d0
00001234  4E4F                     326      trap    #15
00001236                           327  
00001236                           328  .DontAddZero:
00001236  2203                     329      move.l  d3, d1
00001238                           330  
00001238  7003                     331      move.l  #(DISPLAY_NUMBER), d0
0000123A  4E4F                     332      trap    #15
0000123C                           333  
0000123C  4E75                     334      rts
0000123E                           335  
0000123E                           336  ;params: d7: the long word to swapbyte, returns the bytes swapped long word in d7
0000123E                           337  SwapBytes:
0000123E                           338      ;DDCCBBAA
0000123E  E15F                     339      rol.w   #8,d7   ;DDCCAABB
00001240  4847                     340      swap.w  d7    ;AABBDDCC
00001242  E15F                     341      rol.w   #8,d7   ;AABBCCDD
00001244                           342      
00001244  4E75                     343      rts
00001246                           344  
00001246                           345  
00001246                           346  
00001246                           347  
00001246                           348  ;variables
00001246                           349  
00001246= 0D 0A 0D 0A 49 6E ...    350  messageFirstPart        dc.b    CR,LF,CR,LF,'Input the number of the data chunk(Must be between 1 and ',0
00001284= 29 3A 00                 351  messageSecondPart       dc.b    '):',0
00001287                           352  
00001287= 0D 0A 54 68 65 20 ...    353  bytesAvgMsg             dc.b    CR,LF,'The bytes average is: ',0
000012A0= 0D 0A 54 68 65 20 ...    354  shortsAvgMsg            dc.b    CR,LF,'The shorts average is: ',0
000012BA= 0D 0A 54 68 65 20 ...    355  longsAvgMsg             dc.b    CR,LF,'The long average is: ',0
000012D2= 2E 00                    356  point                   dc.b    '.',0
000012D4                           357  
000012D4= 00000000                 358  chunkNumber             dc.l    0   
000012D8                           359  
000012D8= 00000000                 360  numberOfChunks          dc.l    0
000012DC                           361  
000012DC= 00000000                 362  currentNumberOfBytes    dc.l    0
000012E0= 00000000                 363  currentNumberOfShorts   dc.l    0
000012E4= 00000000                 364  currentNumberOfLongs    dc.l    0
000012E8= 00000000                 365  currentBytesPadding     dc.l    0
000012EC                           366  ;currentShortsPadding   dc.l    0
000012EC                           367  
000012EC= 00000000                 368  bytesAverageQ           dc.l    0
000012F0= 00000000                 369  bytesAverageR           dc.l    0
000012F4= 00000000                 370  shortsAverageQ          dc.l    0
000012F8= 00000000                 371  shortsAverageR          dc.l    0
000012FC= 00000000                 372  longsAverageQ           dc.l    0
00001300= 00000000                 373  longsAverageR           dc.l    0
00001304                           374  
00001304                           375  
00001304                           376  
00001304                           377  data                    incbin  "data.bin"
00022166                           378  
00022166                           379      END    START       

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7FFF
BYTESAVERAGEQ       12EC
BYTESAVERAGER       12F0
BYTESAVGMSG         1287
CALCULATEAVERAGES   1070
CALCULATEAVERAGES:ADDNEXTBYTE  10E4
CALCULATEAVERAGES:ADDNEXTLONG  117C
CALCULATEAVERAGES:ADDNEXTSHORT  1132
CALCULATEAVERAGES:CALCBYTESAVG  10DC
CALCULATEAVERAGES:CALCLONGSAVG  1174
CALCULATEAVERAGES:CALCSHORTSAVG  112A
CALCULATEAVERAGES:MAKECALCS  10DC
CALCULATEAVERAGES:NOBYTEROUNDING  111E
CALCULATEAVERAGES:NOLONGROUNDING  11BC
CALCULATEAVERAGES:NOSHORTROUND  116E
CALCULATEAVERAGES:RETRIEVESTGS  1074
CALCULATEAVERAGES:SETBYTESAVG  10EE
CALCULATEAVERAGES:SETLONGSAVG  118C
CALCULATEAVERAGES:SETSHORTSAVG  113E
CALCULATEAVERAGES:TONEXTCHUNK  10B8
CHUNKNUMBER         12D4
CR                  D
CURRENTBYTESPADDING  12E8
CURRENTNUMBEROFBYTES  12DC
CURRENTNUMBEROFLONGS  12E4
CURRENTNUMBEROFSHORTS  12E0
DATA                1304
DISPLAYAVERAGES     11C4
DISPLAYONEAVERAGE   1214
DISPLAYONEAVERAGE:DONTADDZERO  1236
DISPLAY_NUMBER      3
DISPLAY_STRING_WITHOUT_RETURN  E
DISPLAY_STRING_WITH_RETURN  D
GETINPUT            1036
GETINPUT:DISPLAYMESSAGE  1036
INITIALIZEVARS      1020
LF                  A
LONGSAVERAGEQ       12FC
LONGSAVERAGER       1300
LONGSAVGMSG         12BA
MAIN                1000
MESSAGEFIRSTPART    1246
MESSAGESECONDPART   1284
MIN_CHUNK_NUMBER    1
NUMBEROFCHUNKS      12D8
POINT               12D2
READ_A_NUMBER       4
SHORTSAVERAGEQ      12F4
SHORTSAVERAGER      12F8
SHORTSAVGMSG        12A0
START               1000
SWAPBYTES           123E
